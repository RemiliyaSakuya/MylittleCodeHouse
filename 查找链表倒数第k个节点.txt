/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* getKthFromEnd(struct ListNode* head, int k)
{
    if(head == NULL || head->next ==NULL)
        return head;
    struct ListNode* slow=head;
    struct ListNode* fast=head;
    int i=0;
    for(i=0;i<k;i++)    	//先让fast走k步，让fast与slow间开k个距离
    {
        fast=fast->next;
    }
    while(fast != NULL)	//然后让fast与slow同时往后走，当fast为空指针时，slow所指向的即为倒数k个节点
    {
        slow=slow->next;
        fast=fast->next;
    }
    return slow;
}
//思路：利用快慢双指针进行查找