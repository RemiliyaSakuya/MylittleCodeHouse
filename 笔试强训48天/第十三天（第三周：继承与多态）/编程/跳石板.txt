#include <iostream>
#include <vector>
#include <math.h>
#include <limits.h>
using namespace std;
void get_div(int n,vector<int>& tmp) //求n的约数
{
    int i=0;
    for(i=2;i<=sqrt(n);i++)        //记录当前石板的约数
    {
        if(n % i == 0)    //存储约数
        {
            tmp.push_back(i);
            if(n / i != i)
            {
                tmp.push_back(n/i);
            }
        }
    }
}
int main()
{
    int n,m; //输入
    cin >> n >> m;
    vector<int> step(m+1,INT_MAX);//定义一个数组，用于存储所跳到的数中最小所需步数,默认为-1
    step[n]=0; //初始化n的位置为0
    int i=0;
    int j=0;
    for(i=n;i<m;i++)    //定义一个循环，操作从n 到 m 的过程
    {
        if(step[i] == INT_MAX)
        {
            continue;
        }
        vector<int> tmp;   //当前石板下的约数数组
        tmp.resize(0);
        get_div(i,tmp);       //定义一个函数记录当前石板编号的 约数,用一个数组存储
        for(j=0;j<tmp.size();j++)   //罗列当前石板能够跳向的下一个石板
        {
            if(i + tmp[j] <= m && step[tmp[j]+i] != INT_MAX)    //所以，如果跳向的下一个数已经被跳过了，就要判断当前跳到下一个的步数是否小于上次所需的步数，如果小则替换，否则继续
            {
                step[tmp[j]+i]=step[tmp[j]+i]< step[i] + 1 ? step[tmp[j]+i] : step[i]+1;    //跳向下一个石板的步数 = 跳向前一个石板的步数+1（问题在于需要取最小的步数）
            }
            else if(i + tmp[j] <= m)  //如果没跳到过，则直接赋值
            {
                step[tmp[j]+i]= step[i] + 1;
            }
        }
    }
    if(step[m] != INT_MAX)
    cout << step[m] <<endl;
    else
    cout << -1 <<endl;
    return 0;
}